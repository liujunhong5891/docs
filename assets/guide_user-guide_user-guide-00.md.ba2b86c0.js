import{_ as e,o as a,c as i,a as t}from"./app.9a886421.js";const l=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"背景介绍","slug":"背景介绍","link":"#背景介绍","children":[]},{"level":2,"title":"Nautes 简介","slug":"nautes-简介","link":"#nautes-简介","children":[]},{"level":2,"title":"流程简介","slug":"流程简介","link":"#流程简介","children":[{"level":3,"title":"安装租户管理集群","slug":"安装租户管理集群","link":"#安装租户管理集群","children":[]},{"level":3,"title":"注册部署集群","slug":"注册部署集群","link":"#注册部署集群","children":[]},{"level":3,"title":"提交产品配置清单","slug":"提交产品配置清单","link":"#提交产品配置清单","children":[]},{"level":3,"title":"提交部署清单","slug":"提交部署清单","link":"#提交部署清单","children":[]},{"level":3,"title":"跟踪部署过程和结果","slug":"跟踪部署过程和结果","link":"#跟踪部署过程和结果","children":[]}]}],"relativePath":"guide/user-guide/user-guide-00.md"}'),r={name:"guide/user-guide/user-guide-00.md"},s=[t('<p>假设你是有一定云原生技术基础的IT研发人员，请阅读下面这篇IT技术文档，并列出问题点和优化建议。 重点检查 “提交产品配置清单”章节，特别是内容是否连贯、语句是否通顺、措辞是否准确。</p><h2 id="背景介绍" tabindex="-1">背景介绍 <a class="header-anchor" href="#背景介绍" aria-hidden="true">#</a></h2><p>在云原生时代，DevOps、CI/CD和GitOps成为了IT交付领域的核心概念和实践。DevOps注重开发和运维团队之间的紧密协作；CI/CD侧重于自动化和流程优化；GitOps则强调使用Git版本控制系统来管理应用程序的部署和配置。这些理念与实践相互协同，有助于提高软件交付速度和质量。<br> 同时，Kubernetes、Docker、Tekton、ArgoCD等开源工具也为IT系统交付提供了更多选择。它们支持容器化、CI/CD流程自动化等特性，并使得IT系统更加弹性、可扩展且可靠。此外，在以Kubernetes为中心的云原生生态系统不断壮大下，各种云原生工具与应用可以无缝集成并协同工作。<br> 因此，在当前技术趋势下建设一套融合先进理念、工具与实践的持续交付平台将有助于IT从业人员高效、高质量地交付IT系统，并满足不断变化的业务需求。<br> Nautes 正是在这个背景下应运而生的。</p><h2 id="nautes-简介" tabindex="-1">Nautes 简介 <a class="header-anchor" href="#nautes-简介" aria-hidden="true">#</a></h2><p>Nautes是一个开源的CI/CD持续交付平台，融合了DevOps理念和GitOps实践。</p><p>具有以下特性：</p><ul><li>统一账号认证和授权，只需登录一次即可在多个异构工具之间使用。</li><li>使用 Git 库作为单一配置库，确保环境配置的一致性和应用变更的可追溯性。</li><li>集成密钥管理工具（Vault），以保护、存储和管理敏感数据。</li><li>自动化持续部署应用系统及其基础设施，提升部署可靠性。</li><li>可视化跟踪部署链路，以便快速发现和定位问题。</li></ul><h2 id="流程简介" tabindex="-1">流程简介 <a class="header-anchor" href="#流程简介" aria-hidden="true">#</a></h2><p>下文将描述一个租户从零开始到自动实施部署的主流程。包括以下步骤:</p><ol><li>安装租户管理集群</li><li>注册部署集群</li><li>提交产品配置清单</li><li>提交部署配置清单</li><li>跟踪部署过程和结果</li></ol><p>主流程成功执行之后的效果，如下图所示： <img src="/docs/assets/user-guide-overview-1.7b945834.png" alt="directive syntax graph"></p><p>在 Nautes 中，租户管理集群和部署集群是必不可少的组成部分。每个租户只有一个租户管理集群，负责初始化该租户的所有部署集群，并协调各种组件，以向部署集群实施自动化部署。每个租户只有一个存储在 GitLab 中的租户配置库，租户管理集群通过监听租户配置库，向其自动更新相关组件和资源。<br> 每个租户可以拥有多个部署集群，这些部署集群是承载IT系统运行时环境的真正载体，可以是虚拟集群或者物理集群。</p><p>根据IT系统的生命周期，不同阶段需要有配套的运行时环境，用于验证或使用IT系统的功能和非功能特性。通常根据生命周期的不同阶段划分为不同类型的环境，例如开发、测试、预生产和生产环境，这里的环境是一个逻辑概念，作为IT系统部署运行时的管理单元。<br> 环境需要在部署集群上运行，因此必须将环境与部署集群相关联，以便IT系统部署到正确的运行时环境中。</p><p>在Nautes中，对于微服务架构的IT系统，“产品”表示一个IT系统，“项目”表示一个微服务。因此，一个产品包含多个项目，每个项目有独立的代码库。<br> 产品进行到一定阶段时需要验证或使用其特性，通常会根据部署配置向环境所关联的部署集群进行部署，以生成部署运行时环境。每个产品可以包含多个部署运行时，例如，使用相同部署配置在不同集群所创建出来的功能测试和客户演示环境。同时，在相同集群上也可以承载多个产品的部署运行时环境。</p><p>Nautes 通过 Kubernetes 资源文件来定义环境、项目、代码库和部署运行时，并将这些资源文件存储到产品对应的 GitLab 代码库，这些资源文件的集合称为“产品配置清单”。Nautes 监听产品配置清单向部署集群实施自动部署，创建或更新产品的部署运行时环境。</p><p>用户向部署集群监听的 GitLab 代码库提交或更新部署配置文件，这些部署配置文件的集合称为“部署配置清单”。产品的部署运行时环境监听部署配置清单并向部署集群实施自动部署，直到部署集群中的实际状态与 GitLab 代码库中的预期状态一致为止。</p><p>为了保护敏感信息不被泄露，在 Nautes 中的敏感信息均通过 Vault 存取。</p><h3 id="安装租户管理集群" tabindex="-1">安装租户管理集群 <a class="header-anchor" href="#安装租户管理集群" aria-hidden="true">#</a></h3><p>【待补充】</p><h3 id="注册部署集群" tabindex="-1">注册部署集群 <a class="header-anchor" href="#注册部署集群" aria-hidden="true">#</a></h3><p>【待补充】</p><h3 id="提交产品配置清单" tabindex="-1">提交产品配置清单 <a class="header-anchor" href="#提交产品配置清单" aria-hidden="true">#</a></h3><p>提交产品配置清单支持两种方式：Nautes-CLI 和 API 接口。使用 Nautes-CLI 的详细步骤参见 [入门指南] 章节，使用 API 接口的详细步骤参见 [用户指南] 章节。<br> 提交产品配置清单有先后顺序。正向新增的顺序是：创建产品、创建环境、创建项目、创建代码库、创建部署运行时。反向销毁的顺序是：删除部署运行时、删除代码库、删除项目、删除环境、删除产品。</p><p>产品创建成功后，Nautes 将在 GitLab 中创建与产品同名的 group，并在这个 group 中创建名称为 default.project 的代码库，用于存储该产品的配置清单，包括环境、项目、代码库和部署运行时的资源文件。一个产品有且只有一个 default.project 代码库。</p><p>产品配置清单创建成功后，Nautes 将根据产品配置清单在部署集群中自动安装相关资源，使得部署集群具备监听部署配置清单所属的 GitLab 代码库、并向该集群自动部署的能力。</p><h3 id="提交部署清单" tabindex="-1">提交部署清单 <a class="header-anchor" href="#提交部署清单" aria-hidden="true">#</a></h3><p>使用 Git CLI 向存储产品部署配置的 GitLab 代码库提交部署配置清单，例如 deployment、service、volume 等资源文件，Nautes 将根据部署配置清单自动部署产品到指定的部署集群。</p><h3 id="跟踪部署过程和结果" tabindex="-1">跟踪部署过程和结果 <a class="header-anchor" href="#跟踪部署过程和结果" aria-hidden="true">#</a></h3><p>Nautes 支持在部署产品的过程中或部署完成后，使用两种方式来跟踪部署过程和结果：ArgoCD 控制台和 kubectl 命令行。这两种方式均支持单点登录，方便用户管理被授权的产品资源。详细步骤参见 [用户指南] 章节。</p>',29)];const d=e(r,[["render",function(e,t,l,r,d,u){return a(),i("div",null,s)}]]);export{l as __pageData,d as default};
