import{_ as e,o as a,c as r,a as t}from"./app.473e7154.js";const i=JSON.parse('{"title":"主体流程","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"安装部署","slug":"安装部署","link":"#安装部署","children":[]},{"level":2,"title":"注册部署运行时集群","slug":"注册部署运行时集群","link":"#注册部署运行时集群","children":[]},{"level":2,"title":"提交产品配置清单","slug":"提交产品配置清单","link":"#提交产品配置清单","children":[]},{"level":2,"title":"提交部署清单","slug":"提交部署清单","link":"#提交部署清单","children":[]},{"level":2,"title":"查看部署结果","slug":"查看部署结果","link":"#查看部署结果","children":[]}],"relativePath":"guide/user-guide/user-guide-00.md"}'),d={name:"guide/user-guide/user-guide-00.md"},h=[t('<h1 id="主体流程" tabindex="-1">主体流程 <a class="header-anchor" href="#主体流程" aria-hidden="true">#</a></h1><p>下文将描述创建运行时环境的主流程。包括以下步骤:<br><a href="#%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2">安装部署</a><br><a href="#%E6%B3%A8%E5%86%8C%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%9B%86%E7%BE%A4">注册部署运行时集群</a><br><a href="#%E6%8F%90%E4%BA%A4%E4%BA%A7%E5%93%81%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95">提交产品配置清单</a><br><a href="#%E6%8F%90%E4%BA%A4%E9%83%A8%E7%BD%B2%E6%B8%85%E5%8D%95">提交部署配置清单</a><br><a href="#%E6%9F%A5%E7%9C%8B%E9%83%A8%E7%BD%B2%E7%BB%93%E6%9E%9C">查看部署结果</a></p><p>主流程成功执行之后的效果，如下图所示： <img src="/assets/user-guide-overview-1.6d0d8478.png" alt="directive syntax graph"></p><p>在 Nautes 中，租户管理集群和部署运行时集群是必不可少的组成部分。每个租户只有一个租户管理集群，负责初始化该租户的所有部署运行时集群，并协调各种组件，以向部署运行时集群实施自动化部署。每个租户只有一个存储在 GitLab 中的租户配置库，租户管理集群通过监听租户配置库，向其自动更新相关组件和资源。<br> 每个租户可以拥有多个部署运行时集群，这些部署运行时集群是承载IT系统运行时环境的真正载体，可以是虚拟集群或者物理集群。</p><p>根据IT系统的生命周期，不同阶段需要有配套的运行时环境，用于验证或使用IT系统的功能和非功能特性。通常根据生命周期的不同阶段划分为不同类型的环境，例如开发、测试、预生产和生产环境，这里的环境是一个逻辑概念，作为IT系统部署运行时的管理单元。<br> 环境需要在部署运行时集群上运行，因此必须将环境与部署运行时集群相关联，以便IT系统部署到正确的运行时环境中。</p><p>在Nautes中，对于微服务架构的IT系统，“产品”表示一个IT系统，“项目”表示一个微服务。因此，一个产品包含多个项目，每个项目有独立的代码库。<br> 产品进行到一定阶段时需要验证或使用其特性，通常会根据部署配置向环境所关联的部署运行时集群进行部署，以生成部署运行时环境。每个产品可以包含多个部署运行时，例如，使用相同部署配置在不同集群所创建出来的功能测试和客户演示环境。同时，在相同集群上也可以承载多个产品的部署运行时环境。</p><p>Nautes 通过 Kubernetes 资源文件来定义环境、项目、代码库和部署运行时，并将这些资源文件存储到产品对应的 GitLab 代码库，这些资源文件的集合称为“产品配置清单”。Nautes 监听产品配置清单向部署运行时集群实施自动部署，创建或更新产品的部署运行时环境。</p><p>用户向部署运行时集群监听的 GitLab 代码库提交或更新部署配置文件，这些部署配置文件的集合称为“部署配置清单”。产品的部署运行时环境监听部署配置清单并向部署运行时集群实施自动部署，直到部署运行时集群中的实际状态与 GitLab 代码库中的预期状态一致为止。</p><p>为了保护敏感信息不被泄露，Nautes 中的敏感信息均通过 Vault 存取。</p><h2 id="安装部署" tabindex="-1">安装部署 <a class="header-anchor" href="#安装部署" aria-hidden="true">#</a></h2><p>详情参见 <a href="./quickstart-03.html">安装部署</a>。</p><h2 id="注册部署运行时集群" tabindex="-1">注册部署运行时集群 <a class="header-anchor" href="#注册部署运行时集群" aria-hidden="true">#</a></h2><p>【待补充】</p><h2 id="提交产品配置清单" tabindex="-1">提交产品配置清单 <a class="header-anchor" href="#提交产品配置清单" aria-hidden="true">#</a></h2><p>提交产品配置清单支持两种方式：Nautes CLI 和 API 接口。使用 Nautes CLI 的详细步骤参见 <a href="./quickstart-01.html#提交产品配置清单">提交产品配置清单</a> 章节，使用 API 接口的详细步骤参见“用户指南”的“维护产品、维护项目、维护代码库、维护环境、维护部署运行时” 章节。<br> 提交产品配置清单有先后顺序。正向新增的顺序是：创建产品、创建环境、创建项目、创建代码库、创建部署运行时。反向销毁的顺序是：删除部署运行时、删除代码库、删除项目、删除环境、删除产品。</p><p>产品创建成功后，将在 GitLab 中创建与产品同名的 group，并在这个 group 中创建名称为 default.project 的代码库，用于存储该产品的配置清单，包括环境、项目、代码库和部署运行时的资源文件。一个产品有且只有一个 default.project 代码库。</p><p>产品配置清单创建成功后，将根据产品配置清单在部署运行时集群中自动安装相关资源，使得部署运行时集群具备监听产品的 GitLab 代码库、并向该集群自动部署的能力。</p><h2 id="提交部署清单" tabindex="-1">提交部署清单 <a class="header-anchor" href="#提交部署清单" aria-hidden="true">#</a></h2><p>使用 Git CLI 向产品的 GitLab 代码库提交部署配置清单，例如 deployment、service 等资源文件。提交成功后，将根据部署配置清单向指定的部署运行时集群部署产品。详情参考 <a href="./quickstart-01.html#提交部署配置清单">提交部署配置清单</a>。</p><h2 id="查看部署结果" tabindex="-1">查看部署结果 <a class="header-anchor" href="#查看部署结果" aria-hidden="true">#</a></h2><p>部署过程中或者部署完成后，支持两种方式来查看部署结果：ArgoCD 控制台和 kubectl 命令行。这两种方式均支持单点登录，方便用户管理被授权的产品资源。详细参考 <a href="./user-guide-06.html">查看部署结果</a> 章节。</p>',21)];const l=e(d,[["render",function(e,t,i,d,l,s){return a(),r("div",null,h)}]]);export{i as __pageData,l as default};
