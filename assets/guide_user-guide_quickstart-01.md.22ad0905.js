import{_ as s,c as a,o as e,d as n}from"./app.844d8816.js";const l=JSON.parse('{"title":"部署第一个应用","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"安装部署","slug":"安装部署","link":"#安装部署","children":[]},{"level":2,"title":"准备服务器","slug":"准备服务器","link":"#准备服务器","children":[]},{"level":2,"title":"注册部署应用的物理集群","slug":"注册部署应用的物理集群","link":"#注册部署应用的物理集群","children":[]},{"level":2,"title":"注册部署应用的虚拟集群","slug":"注册部署应用的虚拟集群","link":"#注册部署应用的虚拟集群","children":[]},{"level":2,"title":"准备部署应用的运行环境","slug":"准备部署应用的运行环境","link":"#准备部署应用的运行环境","children":[]},{"level":2,"title":"部署应用","slug":"部署应用","link":"#部署应用","children":[]},{"level":2,"title":"查看应用的部署结果","slug":"查看应用的部署结果","link":"#查看应用的部署结果","children":[]}],"relativePath":"guide/user-guide/quickstart-01.md"}'),p={name:"guide/user-guide/quickstart-01.md"},r=[n('<h1 id="部署第一个应用" tabindex="-1">部署第一个应用 <a class="header-anchor" href="#部署第一个应用" aria-hidden="true">#</a></h1><p>本文档将描述部署一个应用的执行过程。包括以下步骤：<br><a href="#%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2">安装部署</a><br><a href="#%E5%87%86%E5%A4%87%E6%9C%8D%E5%8A%A1%E5%99%A8">准备服务器</a><br><a href="#%E6%B3%A8%E5%86%8C%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%9A%84%E7%89%A9%E7%90%86%E9%9B%86%E7%BE%A4">注册部署应用的物理集群</a><br><a href="#%E6%B3%A8%E5%86%8C%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%9A%84%E8%99%9A%E6%8B%9F%E9%9B%86%E7%BE%A4">注册部署应用的虚拟集群</a><br><a href="#%E5%87%86%E5%A4%87%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83">准备部署应用的运行环境</a><br><a href="#%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8">部署应用</a><br><a href="#%E6%9F%A5%E7%9C%8B%E5%BA%94%E7%94%A8%E7%9A%84%E9%83%A8%E7%BD%B2%E7%BB%93%E6%9E%9C">查看应用的部署结果</a></p><blockquote><p>“注册部署应用的物理集群、注册部署应用的虚拟集群”，这两个步骤任选其中一步执行成功后，即可进入“准备部署应用的运行环境”步骤。</p></blockquote><h2 id="安装部署" tabindex="-1">安装部署 <a class="header-anchor" href="#安装部署" aria-hidden="true">#</a></h2><p>以阿里云为例描述在公有云部署 Nautes 的过程，详情参考 <a href="./quickstart-03.html">安装部署</a>。</p><p>安装部署成功后，将部署众多组件。其中，GitLab 是租户的代码托管平台，用于存储租户的配置库，IT 系统的源代码、部署配置和流水线代码等。Vault 是一款安全地存储和管理敏感数据的开源工具，可以和 Kubernetes 无缝集成。ArgoCD 是 Kubernetes 原生的持续部署工具，用于自动部署并确保 Kubernetes 集群中的应用程序配置与 Git 存储库中的配置声明一致。Dex 是一个使用 OpenID Connect (OIDC) 协议提供身份验证和授权服务的开源工具，客户端只需要与 Dex 对接一次，即可通过 Dex 访问后端的各种组件。每个租户只有一个租户管理集群，负责初始化该租户的所有运行集群，并协调各种组件，以向目标集群实施自动化部署。</p><h2 id="准备服务器" tabindex="-1">准备服务器 <a class="header-anchor" href="#准备服务器" aria-hidden="true">#</a></h2><p>下文将以阿里云为例描述如何准备服务器，是部署应用的前提。如果已存在服务器，并且服务器中已安装 Kubernetes 集群，可省略该步骤。</p><p>先创建 ECS 云服务器，详情参考 <a href="https://help.aliyun.com/document_detail/25422.html" target="_blank" rel="noreferrer">云服务器 ECS</a>。服务器创建成功后，在服务器上安装 K3s，命令如下：</p><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#676E95;"># 根据实际情况，替换 --tls-san 参数值为服务器的公网 IP</span></span>\n<span class="line"><span style="color:#A6ACCD;">curl -sfL https://get.k3s.io </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> INSTALL_K3S_VERSION=v1.21.14+k3s1 INSTALL_K3S_EXEC=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--tls-san xxx.xxx.xxx.xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> sh -s - server --disable servicelb --disable traefik --disable metrics-server</span></span>\n<span class="line"><span style="color:#A6ACCD;">mkdir  </span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">HOME</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">/.kube</span></span>\n<span class="line"><span style="color:#A6ACCD;">cp /etc/rancher/k3s/k3s.yaml </span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">HOME</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">/.kube/k3s-config</span></span>\n<span class="line"><span style="color:#A6ACCD;">cp /etc/rancher/k3s/k3s.yaml </span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">HOME</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">/.kube/config</span></span>\n<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> KUBECONFIG=</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">HOME</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">/.kube/config</span></span>\n<span class="line"></span></code></pre></div><h2 id="注册部署应用的物理集群" tabindex="-1">注册部署应用的物理集群 <a class="header-anchor" href="#注册部署应用的物理集群" aria-hidden="true">#</a></h2><p>下文将描述如何基于服务器来注册部署应用的物理集群。</p><p>先克隆 <a href="https://gitlab.bluzin.io/nautes-labs/cli.git" target="_blank" rel="noreferrer">注册集群模板</a> 的代码库到本地，并替换“examples/demo-cluster-physical-worker.yaml”模板文件的相关变量。下载 <a href="https://gitlab.bluzin.io/nautes-labs/cli.git" target="_blank" rel="noreferrer">命令行工具</a>，并执行以下命令。命令执行成功后，会向服务器的集群中安装相关配置，并将该集群托管于管理集群。这时在服务器上的集群作为部署应用的运行集群使用。</p><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#676E95;"># examples/demo-cluster-host.yaml 指在模板代码库中模板文件的相对路径</span></span>\n<span class="line"><span style="color:#676E95;"># gitlab-access-token 指 GitLab 访问令牌</span></span>\n<span class="line"><span style="color:#676E95;"># api-server-address 指 API Server 的访问地址</span></span>\n<span class="line"><span style="color:#676E95;"># 模板文件中的 apiServer、kubeconfig，指安装在服务器上的集群信息。更多参数说明，参见模板文件的注释</span></span>\n<span class="line"><span style="color:#A6ACCD;">nautes apply -f examples/demo-cluster-physical-worker.yaml -t </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">gitlab-access-token -s </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">api-server-address</span></span>\n<span class="line"></span></code></pre></div><blockquote><p>GitLab 安装完成后，请先注册账号，再创建 personal access token。由于注册集群的账号必须拥有租户配置库的写入权限，同时 main 分支默认是保护分支，因此建议设置账号角色为租户配置库的 Maintainer。personal access token，详情参考 <a href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html" target="_blank" rel="noreferrer">Personal access tokens</a>。租户配置库的访问地址，详情参考 <a href="./quickstart-03.html#查看部署结果">查看部署结果</a>。 API Server 支持 http 和 https 协议。如果使用 https，需要导入 pki.crt 证书到执行 API 的服务器。以 Windows 操作系统的本地 PC 机为例，需要导入证书到“受信任的根证书颁发机构”证书目录才能使用 https 协议的 API Server。关于 API Server 的访问地址和 pki.crt 的下载地址，详情参考 <a href="./quickstart-03.html#查看部署结果">安装部署</a>。</p></blockquote><h2 id="注册部署应用的虚拟集群" tabindex="-1">注册部署应用的虚拟集群 <a class="header-anchor" href="#注册部署应用的虚拟集群" aria-hidden="true">#</a></h2><p>下文将描述如何基于服务器来注册部署应用的虚拟集群。</p><p>先克隆 <a href="https://gitlab.bluzin.io/nautes-labs/cli.git" target="_blank" rel="noreferrer">注册集群模板</a> 的代码库到本地，并替换“examples/demo-cluster-host.yaml”模板文件的相关变量。下载 <a href="https://gitlab.bluzin.io/nautes-labs/cli.git" target="_blank" rel="noreferrer">命令行工具</a>，并执行以下命令。命令执行成功后，会向服务器中的集群安装相关配置，并将该集群托管于管理集群。这时在服务器上的集群作为虚拟集群的宿主集群。</p><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#676E95;"># 模板文件中的 apiServer、kubeconfig，指安装在服务器上的集群信息。更多参数说明，参见模板文件的注释</span></span>\n<span class="line"><span style="color:#A6ACCD;">nautes apply -f examples/demo-cluster-host.yaml -t </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">gitlab-access-token -s </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">api-server-address</span></span>\n<span class="line"></span></code></pre></div><p>然后在宿主集群上进一步安装虚拟集群。与前面的步骤类似，模板代码库中模板文件的相对路径是“examples/demo-cluster-virtual-worker.yaml”，当替换变量、执行命令等步骤执行成功之后，会向宿主集群中安装一套虚拟集群，并将虚拟集群托管于管理集群。这时该虚拟集群作为部署应用的运行集群使用。</p><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">nautes apply -f examples/demo-cluster-virtual-worker.yaml -t </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">gitlab-access-token -s </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">api-server-address</span></span>\n<span class="line"></span></code></pre></div><blockquote><p>GitLab 账号、API Server 的注意事项，与 <a href="#%E6%B3%A8%E5%86%8C%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%9A%84%E7%89%A9%E7%90%86%E9%9B%86%E7%BE%A4">注册部署应用的物理集群</a> 相同。</p></blockquote><h2 id="准备部署应用的运行环境" tabindex="-1">准备部署应用的运行环境 <a class="header-anchor" href="#准备部署应用的运行环境" aria-hidden="true">#</a></h2><p>对于微服务架构的 IT 系统准备部署应用的运行环境。在 Nautes 中，通过 Kubernetes 资源文件定义部署应用的运行环境配置，包括IT系统、微服务、微服务的代码库、IT系统的环境、负载IT系统的运行时环境等。</p><p>下文将描述通过命令行提交部署应用的 Kubernetes 资源文件。</p><p>先克隆 <a href="https://gitlab.bluzin.io/nautes-labs/cli.git" target="_blank" rel="noreferrer">配置模板库</a> 的代码库到本地，批量替换“examples/demo-product.yaml”中的变量 suffix，并更新 Environment 资源的 cluster 值为运行集群的名称。下载 <a href="https://gitlab.bluzin.io/nautes-labs/cli.git" target="_blank" rel="noreferrer">命令行工具</a>，执行以下命令。命令执行成功后，将向 GitLab 代码库中生成 Kubernetes 资源文件，并基于这些文件在 GitLab 生成与IT系统相关的群组和代码库、在指定运行集群上安装 IT 系统的部署运行时环境。</p><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#676E95;"># “examples/demo-product.yaml” 指配置模板库中模板文件的相对路径</span></span>\n<span class="line"><span style="color:#676E95;"># gitlab-access-token 是 GitLab 访问令牌</span></span>\n<span class="line"><span style="color:#676E95;"># api-server-address 是 API Server 的访问地址</span></span>\n<span class="line"><span style="color:#A6ACCD;">nautes apply -f examples/demo-product.yaml -t </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">gitlab-access-token -s </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">api-server-address</span></span>\n<span class="line"></span></code></pre></div><blockquote><p>在 GitLab 中，一个 IT 系统映射一个 group ，每个 group 有一个名称为 default.project 的默认代码库，用于存储 IT 系统运行环境的资源文件。 GitLab 账号需要拥有 default.project 代码库的写入权限，由于 main 分支默认是保护分支，因此建议设置账号角色为 group 成员的 Maintainer。关于 personal access token，详情参考 <a href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html" target="_blank" rel="noreferrer">Personal access tokens</a>。</p></blockquote><h2 id="部署应用" tabindex="-1">部署应用 <a class="header-anchor" href="#部署应用" aria-hidden="true">#</a></h2><p>部署 IT 系统的资源清单，简称为“部署配置清单”，例如 deployment、service 等资源。下文将描述通过 Git CLI 提交部署配置清单到IT系统的代码库，IT 系统的部署运行时环境将监听这个代码库以部署应用。</p><p>先克隆 <a href="https://github.com/liujunhong5891/demo-user-deployments" target="_blank" rel="noreferrer">部署示例</a> 代码库到本地，修改本地代码库中 ingress 资源的域名。</p><div class="language-yaml"><button class="copy"></button><span class="lang">yaml</span><pre><code><span class="line"><span style="color:#676E95;"># 本示例代码库中 ingress 的相对路径为 /deployment/test/devops-sample-svc.yaml</span></span>\n<span class="line"><span style="color:#F07178;">apiVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">networking.k8s.io/v1</span></span>\n<span class="line"><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Ingress</span></span>\n<span class="line"><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ks-sample-dev</span></span>\n<span class="line"><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;"># 根据运行集群的IP地址，替换host的域名，即将“119-8-58-20”替换为运行集群的IP</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">host</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">devops-sample.119-8-58-20.nip.io</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">http</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">paths</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F78C6C;">...</span></span>\n<span class="line"></span></code></pre></div><p>修改本地 Git 客户端配置，将 IT 系统的 GitLab 代码库设置为远程仓库，再 push 部署配置清单到 IT 系统的代码库。推送成功后，将向 IT 系统的部署运行时环境部署应用。Git CLI 详情参考 <a href="https://docs.gitlab.com/ee/tutorials/make_your_first_git_commit.html" target="_blank" rel="noreferrer">GitLab</a>。</p><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#676E95;"># 以下为产品的 GitLab 代码库，用于存储产品的部署配置清单</span></span>\n<span class="line"><span style="color:#A6ACCD;">git remote set-url origin xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span>\n<span class="line"></span></code></pre></div><blockquote><p>推送部署配置清单的 GitLab 账号需要拥有存储部署配置清单代码库的写入权限。</p></blockquote><h2 id="查看应用的部署结果" tabindex="-1">查看应用的部署结果 <a class="header-anchor" href="#查看应用的部署结果" aria-hidden="true">#</a></h2><p>可以通过 ArgoCD 控制台或者 kubectl 命令行来查看 IT 系统的部署结果，并且只能查看和管理被授权 IT 系统的相关资源。下文将描述如何通过 ArgoCD 查看部署结果。</p><p>访问安装在运行集群中的 <a href="./quickstart-03.html#查看部署结果">ArgoCD 控制台</a>，点击 LOG IN VIA DEX 进行统一认证，如果在当前浏览器会话中未登录过 GitLab，那么需要填写 GitLab 账号密码进行登录。登录成功后页面会自动跳转到 ArgoCD 控制台。在 ArgoCD 控制台中将呈现被授权 IT 系统相关的 ArgoCD applications，可以查看和管理相关资源。点击某个 ArgoCD application 卡片，将呈现该 application 的资源清单，可以查看资源的 YAML、事件、日志等，并对该资源执行同步、重启、删除等操作。 点击 ArgoCD 控制台左侧菜单栏的“设置”，可以查看被授权IT 系统相关的 ArgoCD projects。</p>',38)];const t=s(p,[["render",function(s,n,l,p,t,o){return e(),a("div",null,r)}]]);export{l as __pageData,t as default};
