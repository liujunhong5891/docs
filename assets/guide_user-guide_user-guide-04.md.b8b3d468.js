import{_ as s,o as n,c as a,a as e}from"./app.e8b008f9.js";const l=JSON.parse('{"title":"维护环境","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"维护环境（API 接口）","slug":"维护环境（api-接口）","link":"#维护环境（api-接口）","children":[{"level":3,"title":"创建环境","slug":"创建环境","link":"#创建环境","children":[]},{"level":3,"title":"更新环境","slug":"更新环境","link":"#更新环境","children":[]},{"level":3,"title":"删除环境","slug":"删除环境","link":"#删除环境","children":[]},{"level":3,"title":"查询环境","slug":"查询环境","link":"#查询环境","children":[]}]},{"level":2,"title":"强制提交环境（API 接口）","slug":"强制提交环境（api-接口）","link":"#强制提交环境（api-接口）","children":[]}],"relativePath":"guide/user-guide/user-guide-04.md"}'),p={name:"guide/user-guide/user-guide-04.md"},o=[e('<h1 id="维护环境" tabindex="-1">维护环境 <a class="header-anchor" href="#维护环境" aria-hidden="true">#</a></h1><p>在开始本节之前，请确保您已阅读 <a href="./user-guide-00.html">概述</a> 章节，了解创建运行时环境的主流程和相关术语；并且已经创建了至少一个产品、注册了至少一个部署集群，详情参见 <a href="./user-guide-01.html">维护产品</a>。</p><p>环境用于负载产品的部署运行时。一个产品可以包含多个环境，每个环境都需要关联一个 Kubernetes 集群。</p><p>下面将详细介绍如何维护环境以及相关规则。维护环境有多种方式，包括命令行、API 接口等，下文将描述通过 API 接口的方式维护环境。</p><h2 id="维护环境（api-接口）" tabindex="-1">维护环境（API 接口） <a class="header-anchor" href="#维护环境（api-接口）" aria-hidden="true">#</a></h2><h3 id="创建环境" tabindex="-1">创建环境 <a class="header-anchor" href="#创建环境" aria-hidden="true">#</a></h3><p>产品创建成功之后，创建关联集群的环境以部署指定产品。步骤如下：</p><ol><li><p>访问 <a href="./quickstart-03.html">Swagger UI</a>，选择右上角 select a definition 下拉框中的 api.environment.v1.Environment；选择 POST 接口，点击 try it out，在 product_name 参数中输入产品名称，在 environment_name 参数中输入环境名称，点击 execute，生成 API 请求的代码示例。</p></li><li><p>获取请求 API 的 access token，作为 API 请求的请求头参数。详情参考 <a href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html" target="_blank" rel="noreferrer">Personal access tokens</a>。具有 owner、maintainer、developer、reporter 角色的产品成员，以及 GitLab 管理员都可以创建特定产品的环境。</p></li><li><p>将前置步骤获取的 access token 作为 API 请求的请求头参数，通过 curl 命令，或者 Postman、JMeter 等工具执行 API 请求以新增环境。更新后的 API 请求的代码示例：</p><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;"># 实操过程中根据实际情况替换 URL 地址和相关参数 </span></span>\n<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;"># “cluster”是关联集群，指注册到租户管理集群的部署集群名称，“env_type”是环境类型</span></span>\n<span class="line"><span style="color:#A6ACCD;"> curl -X </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>\n<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">HTTP://xxx.xxx.xxx.xxx:xxxxx/api/v1/products/product-demo/environments/environment-demo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>\n<span class="line"><span style="color:#A6ACCD;"> -H </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">accept: application/json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>\n<span class="line"><span style="color:#A6ACCD;"> -H </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-Type: application/json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>\n<span class="line"><span style="color:#A6ACCD;"> -H </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>\n<span class="line"><span style="color:#A6ACCD;"> -d </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{</span></span>\n<span class="line"><span style="color:#C3E88D;">         &quot;cluster&quot;: &quot;my-cluster&quot;,</span></span>\n<span class="line"><span style="color:#C3E88D;">         &quot;env_type&quot;: &quot;development&quot;</span></span>\n<span class="line"><span style="color:#C3E88D;">     }</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span></code></pre></div><p>相同产品内的环境不能共享一个 kubernetes 集群，不同产品间的环境可以共享一个 kubernetes 集群。<br> 请求成功后，在产品对应的 default.project 代码库中生成关联产品的环境资源文件。</p><div class="language-yaml"><button class="copy"></button><span class="lang">yaml</span><pre><code><span class="line"><span style="color:#F07178;">apiVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nautes.resource.nautes.io/v1alpha1</span></span>\n<span class="line"><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Environment</span></span>\n<span class="line"><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">environment-demo</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">namespace</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-namespace</span></span>\n<span class="line"><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">cluster</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-cluster</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">envType</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">product</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">product-demo</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"></span></code></pre></div></li></ol><h3 id="更新环境" tabindex="-1">更新环境 <a class="header-anchor" href="#更新环境" aria-hidden="true">#</a></h3><p>环境创建成功后，可以修改环境，但相同产品内不同环境关联的集群不能相同。详情参考 <a href="#%E5%88%9B%E5%BB%BA%E7%8E%AF%E5%A2%83">创建环境</a> 。 请求成功后，将更新存储在产品对应的 default.project 代码库中的环境资源文件。一旦环境负载了产品的部署运行时，则不能修改环境的关联集群，自动部署过程中将拦截请求。</p><h3 id="删除环境" tabindex="-1">删除环境 <a class="header-anchor" href="#删除环境" aria-hidden="true">#</a></h3><p>由于环境可能关联多个资源，在删除环境之前，需要先删除关联该环境的所有相关资源，例如部署运行时等。步骤如下：</p><ol><li>访问 <a href="./quickstart-03.html">Swagger UI</a>，选择右上角 select a definition 下拉框中的 api.environment.v1.Environment；选择 DELETE 接口，点击 try it out，在 product_name 参数中输入产品名称，在 environment_name 参数中输入环境名称，点击 execute，生成 API 请求的代码示例。详情参考 <a href="#%E5%88%9B%E5%BB%BA%E7%8E%AF%E5%A2%83">创建环境的步骤1</a> 。</li><li>获取请求 API 的 access token，作为 API 请求的请求头参数。详情参考 <a href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html" target="_blank" rel="noreferrer">Personal access tokens</a>。具有 owner、maintainer、developer、reporter 角色的产品成员，以及 GitLab 管理员才可以删除特定产品的环境。</li><li>将前置步骤获取的 access token 作为 API 请求的请求头参数，通过 curl 命令，或者 Postman、JMeter 等工具执行 API 来删除环境。请求成功后，环境资源文件将被删除。</li></ol><h3 id="查询环境" tabindex="-1">查询环境 <a class="header-anchor" href="#查询环境" aria-hidden="true">#</a></h3><p>查询环境有两个 API 接口，分别是查询环境列表、查询环境详情。<br> 查询环境列表的步骤如下：</p><ol><li>访问 <a href="./quickstart-03.html">Swagger UI</a>，选择右上角 select a definition 下拉框中的 api.environment.v1.Environment；选择相对路径是 /api/v1/products/{products_name}/environments 的 GET 接口，点击 try it out，在 product_name 参数中输入产品名称，点击 execute，生成 API 请求的代码示例。详情参考 <a href="#%E5%88%9B%E5%BB%BA%E7%8E%AF%E5%A2%83">创建环境的步骤1</a>。</li><li>获取请求 API 的 access token，作为 API 请求的请求头参数。详情参考 <a href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html" target="_blank" rel="noreferrer">Personal access tokens</a>。具有 owner、maintainer、developer、reporter 角色的产品成员，以及 GitLab 管理员才可以查询特定产品的环境。</li><li>将前置步骤获取的 access token 作为 API 请求的请求头参数，通过 curl 命令，或者 Postman、JMeter 等工具执行 API 以查询代码库。请求成功后，如果用户是产品成员，将返回环境信息。</li></ol><p>查询环境详情的步骤如下：</p><ol><li>访问 <a href="./quickstart-03.html">Swagger UI</a>，选择右上角 select a definition 下拉框中的 api.environment.v1.Environment；选择相对路径是 /api/v1/products/{products_name}/environments/{enviroment_name} 的 GET 接口，点击 try it out，在 product_name 参数中输入产品名称，在 enviroment_name 参数中输入环境名称，点击 execute，生成 API 请求的代码示例。详情参考 <a href="#%E5%88%9B%E5%BB%BA%E7%8E%AF%E5%A2%83">创建环境的步骤1</a>。</li><li>其余步骤与“查询环境列表”相同，不再赘述。</li></ol><h2 id="强制提交环境（api-接口）" tabindex="-1">强制提交环境（API 接口） <a class="header-anchor" href="#强制提交环境（api-接口）" aria-hidden="true">#</a></h2><p>详情规则参见 <a href="./user-guide-03.html#强制提交代码库api-接口">强制提交资源文件（API 接口）</a>。</p><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#676E95;"># 以下示例为创建环境时，设置 cluster 的属性值不合规，启用 insecure_skip_check 参数以强制提交环境的资源文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">curl -X </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">HTTP://xxx.xxx.xxx.xxx:xxxxx/api/v1/products/product-demo/environments/environment-demo?insecure_skip_check=true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -H </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">accept: application/json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -H </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-Type: application/json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -d </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{</span></span>\n<span class="line"><span style="color:#C3E88D;">  &quot;cluster&quot;: &quot;my-cluster-invalid&quot;,</span></span>\n<span class="line"><span style="color:#C3E88D;">  &quot;env_type&quot;: &quot;development&quot;</span></span>\n<span class="line"><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span></code></pre></div>',21)];const t=s(p,[["render",function(s,e,l,p,t,r){return n(),a("div",null,o)}]]);export{l as __pageData,t as default};
