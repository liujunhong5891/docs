import{_ as s,o as a,c as e,a as n}from"./app.3b94a943.js";const l=JSON.parse('{"title":"跟踪部署过程和结果","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"ArgoCD 控制台","slug":"argocd-控制台","link":"#argocd-控制台","children":[]},{"level":2,"title":"kubectl 命令行","slug":"kubectl-命令行","link":"#kubectl-命令行","children":[]}],"relativePath":"guide/user-guide/user-guide-06.md"}'),p={name:"guide/user-guide/user-guide-06.md"},o=[n('<h1 id="跟踪部署过程和结果" tabindex="-1">跟踪部署过程和结果 <a class="header-anchor" href="#跟踪部署过程和结果" aria-hidden="true">#</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h2><p>在开始本节之前，请确保您已阅读 <a href="./user-guide-00.html">用户指南的概述</a> 章节，了解 Nautes 的主流程和相关术语；并且已经创建了至少一个部署运行时，详情参见 <a href="./user-guide-05.html">维护部署运行时</a>。</p><p>Nautes 在部署产品的过程中或者部署完成后，支持通过 ArgoCD 控制台和 kubectl 命令行两种方式跟踪部署过程和部署结果。Nautes 中的产品分别与 ArgoCD 中的 project、Kubernetes 集群中的 namespace 建立对应关系，借助 ArgoCD project 和 Kubernetes namespace 既定规则对产品进行权限管理。</p><p>下面将详细介绍这两种方式的操作步骤。</p><h2 id="argocd-控制台" tabindex="-1">ArgoCD 控制台 <a class="header-anchor" href="#argocd-控制台" aria-hidden="true">#</a></h2><ol><li>访问安装在部署集群中 <a href="./quickstart-03.html">ArgoCD Web UI</a> ，点击 log in via dex，在弹出的 GitLab Web UI 中填写您的 GitLab 账号和密码，点击登录后将单点登入到 ArgoCD。 <img src="/docs/assets/quickstart-argocd-1.7d64ecfb.png" alt="directive syntax graph"></li><li>在 ArgoCD Web UI，您可以查看与授权产品对应的 ArgoCD project，并拥有这些 project 下 application、exec、logs 资源的所有操作权限。详情参考 <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/" target="_blank" rel="noreferrer">ArgoCD</a> 。 <img src="/docs/assets/quickstart-argocd-2.97e9fe9f.png" alt="directive syntax graph"></li></ol><h2 id="kubectl-命令行" tabindex="-1">kubectl 命令行 <a class="header-anchor" href="#kubectl-命令行" aria-hidden="true">#</a></h2><ol><li><p>访问 <a href="./quickstart-03.html">dex 服务地址</a>，填写 extra scopes 属性值为 groups，点击 login，保存 ID Token 到本地。 <img src="/docs/assets/quickstart-dex-1.fef7de07.png" alt="directive syntax graph"><img src="/docs/assets/quickstart-dex-2.c40f0533.png" alt="directive syntax graph"></p></li><li><p>通过脚本获取部署集群的 kubeconfig 文件，并将 ID Token 替换 kubeconfig 文件中的 users 配置。</p></li></ol><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#676E95;"># 将实际的集群名称替换 $VCLUSTER 变量，并执行命令行获取部署集群的 kubeconfig 文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">kubectl get secret vc-</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">VCLUSTER-vcluster -n </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">VCLUSTER --template={{.data.config}} </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> base64 -d</span></span>\n<span class="line"></span></code></pre></div><div class="language-yaml"><button class="copy"></button><span class="lang">yaml</span><pre><code><span class="line"><span style="color:#676E95;"># 将 ID-Token 替换 kubeconfig 文件中的 users 配置</span></span>\n<span class="line"><span style="color:#F07178;">apiVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v1</span></span>\n<span class="line"><span style="color:#F07178;">clusters</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#FFCB6B;">...</span><span style="color:#F78C6C;">...</span></span>\n<span class="line"><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Config</span></span>\n<span class="line"><span style="color:#F07178;">preferences</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#F07178;">users</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">user</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">token</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span>\n<span class="line"></span></code></pre></div><ol start="3"><li>在 kubectl 客户端，切换 KUBECONFIG 环境变量为前置步骤的 kubeconfig 文件之后，可以通过 kubectl 命令行查看与授权产品对应的 namespace 中的资源，并且拥有该 namespace 的管理员权限。</li></ol><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#676E95;"># 切换 Kubernetes 集群为上文修改后的 kubeconfig 文件</span></span>\n<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> KUBECONFIG=/opt/vcluster/kubeconfig-dex.yaml</span></span>\n<span class="line"><span style="color:#676E95;"># 使用 kubectl 命令行管理产品的相关资源，以下命令行仅为示例</span></span>\n<span class="line"><span style="color:#A6ACCD;">kubectl get deployment -n deployment-runtime-1</span></span>\n<span class="line"><span style="color:#A6ACCD;">kubectl delete deployment deployment-test -n deployment-runtime-1</span></span>\n<span class="line"></span></code></pre></div>',13)];const t=s(p,[["render",function(s,n,l,p,t,r){return a(),e("div",null,o)}]]);export{l as __pageData,t as default};
