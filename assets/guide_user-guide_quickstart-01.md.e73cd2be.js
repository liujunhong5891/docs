import{_ as s,o as a,c as l,a as e}from"./app.e8b008f9.js";const n=JSON.parse('{"title":"创建运行时环境","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"安装部署","slug":"安装部署","link":"#安装部署","children":[]},{"level":2,"title":"注册部署运行时集群","slug":"注册部署运行时集群","link":"#注册部署运行时集群","children":[]},{"level":2,"title":"提交产品配置清单","slug":"提交产品配置清单","link":"#提交产品配置清单","children":[]},{"level":2,"title":"提交部署配置清单","slug":"提交部署配置清单","link":"#提交部署配置清单","children":[]},{"level":2,"title":"查看部署结果","slug":"查看部署结果","link":"#查看部署结果","children":[]}],"relativePath":"guide/user-guide/quickstart-01.md"}'),p={name:"guide/user-guide/quickstart-01.md"},r=[e('<h1 id="创建运行时环境" tabindex="-1">创建运行时环境 <a class="header-anchor" href="#创建运行时环境" aria-hidden="true">#</a></h1><p>本文档将描述创建部署运行时的执行过程。包括以下步骤：<br><a href="#%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2">安装部署</a><br><a href="#%E6%B3%A8%E5%86%8C%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%9B%86%E7%BE%A4">注册部署运行时集群</a><br><a href="#%E6%8F%90%E4%BA%A4%E4%BA%A7%E5%93%81%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95">提交产品配置清单</a><br><a href="#%E6%8F%90%E4%BA%A4%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95">提交部署配置清单</a><br><a href="#%E8%B7%9F%E8%B8%AA%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B%E5%92%8C%E7%BB%93%E6%9E%9C">跟踪部署过程和结果</a></p><h2 id="安装部署" tabindex="-1">安装部署 <a class="header-anchor" href="#安装部署" aria-hidden="true">#</a></h2><p>详情参考 <a href="./quickstart-03.html">安装部署</a>。</p><h2 id="注册部署运行时集群" tabindex="-1">注册部署运行时集群 <a class="header-anchor" href="#注册部署运行时集群" aria-hidden="true">#</a></h2><p>待补充。</p><h2 id="提交产品配置清单" tabindex="-1">提交产品配置清单 <a class="header-anchor" href="#提交产品配置清单" aria-hidden="true">#</a></h2><p>支持通过 Nautes CLI 提交产品、环境、项目、代码库、部署运行时等资源文件，这些资源文件组成了“产品配置清单”。提交成功后，将根据产品配置清单向部署运行时集群实施部署，以安装产品的部署运行时环境。</p><ol><li><p>克隆 <a href="https://gitlab.bluzin.io/nautes-labs/cli.git" target="_blank" rel="noreferrer">产品配置库模板</a> 的代码库到本地，批量替换产品配置库模板中的变量 suffix。</p></li><li><p>下载 <a href="https://gitlab.bluzin.io/nautes-labs/cli.git" target="_blank" rel="noreferrer">命令行工具</a>，执行以下命令。其中，“examples/demo.yaml” 指存储产品配置库模板的代码库的相对路径，gitlab-access-token 是您的 GitLab 访问令牌，api-server-address 是 <a href="./quickstart-03.html#查看组件信息">Nautes API Server 的访问地址</a>。执行成功后，将生成产品配置清单，并自动安装产品的部署运行时环境。</p></li></ol><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">nautes apply -f examples/demo.yaml -t </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">gitlab-access-token -s </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">api-server-address</span></span>\n<span class="line"></span></code></pre></div><h2 id="提交部署配置清单" tabindex="-1">提交部署配置清单 <a class="header-anchor" href="#提交部署配置清单" aria-hidden="true">#</a></h2><p>部署产品的资源清单，简称为“部署配置清单”，例如 deployment、service 等资源。通过 Git CLI 提交部署配置清单到产品的代码库，产品的部署运行时环境将监听这个代码库以实施产品部署。</p><ol><li><p>克隆 <a href="https://github.com/liujunhong5891/demo-user-deployments" target="_blank" rel="noreferrer">部署示例</a> 代码库到本地。</p></li><li><p>修改本地代码库中 ingress 资源的域名。本示例代码库中 ingress 的相对路径为 /deployment/test/devops-sample-svc.yaml。</p></li></ol><div class="language-yaml"><button class="copy"></button><span class="lang">yaml</span><pre><code><span class="line"><span style="color:#FFCB6B;">---</span></span>\n<span class="line"><span style="color:#F07178;">apiVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">networking.k8s.io/v1</span></span>\n<span class="line"><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Ingress</span></span>\n<span class="line"><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ks-sample-dev</span></span>\n<span class="line"><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;"># 根据部署运行时集群的IP地址，替换host的域名。这里将“119-8-58-20”替换为部署运行时集群的访问IP即可</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">host</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">devops-sample.119-8-58-20.nip.io</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">http</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">paths</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F78C6C;">...</span></span>\n<span class="line"></span></code></pre></div><ol start="3"><li>修改本地 Git 客户端配置，将产品的 GitLab 代码库设置为远程仓库。</li></ol><div class="language-Shell"><button class="copy"></button><span class="lang">Shell</span><pre><code><span class="line"><span style="color:#676E95;"># 以下为产品的 GitLab 代码库，用于存储产品的部署配置清单</span></span>\n<span class="line"><span style="color:#A6ACCD;">git remote set-url origin xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span>\n<span class="line"></span></code></pre></div><ol start="4"><li>提交部署配置清单到产品的代码库。Git CLI 详情参考 <a href="https://docs.gitlab.com/ee/tutorials/make_your_first_git_commit.html" target="_blank" rel="noreferrer">GitLab</a>。</li></ol><h2 id="查看部署结果" tabindex="-1">查看部署结果 <a class="header-anchor" href="#查看部署结果" aria-hidden="true">#</a></h2><p>在部署产品的过程中或者部署完成后，可以通过 ArgoCD 控制台或者 kubectl 命令行来查看部署结果。这两种方式均支持单点登录，方便用户管理被授权的产品资源。<br> 下文主要描述如何通过 ArgoCD 查看部署结果。</p><p>查看产品的相关资源：</p><ol><li>访问部署运行时集群中的 <a href="./quickstart-03.html#查看组件信息">ArgoCD UI</a>。以 <a href="https://argocd.deployment1.119-8-58-20.nip.io:30443" target="_blank" rel="noreferrer">https://argocd.deployment1.119-8-58-20.nip.io:30443</a> 为例，只需将“119-8-58-20”替换为部署运行时集群的访问IP即可。</li><li>点击 log in via dex，将跳转到 GitLab UI 地址；填写您的 GitLab 账号密码并点击登录，将单点录入到 ArgoCD、并在 ArgoCD UI 呈现被授权产品相关的 ArgoCD applications。ArgoCD applications 与产品的部署运行时对应。</li><li>点击 ArgoCD UI 左侧菜单栏的“设置”，将跳转到 ArgoCD 的设置功能界面；点击 projects，可以查看被授权产品相关的 ArgoCD projects。ArgoCD projects 与产品对应。</li></ol><p>查看产品的部署运行时环境：</p><ol><li>选择某个 ArgoCD application，将跳转到 application 的详情界面，并呈现部署运行时环境中的资源，例如 deployment、service 等。可以查看资源的类型、名称、运行状态、运行时长、运行实例数等。</li><li>选择某个资源，可以查看资源的资源清单、事件、日志等，并对该资源执行同步、重启、删除等操作。由于 ArgoCD 监听了产品的代码库，因此无论在 ArgoCD 中怎么操作，最终都将与代码库中的部署配置清单保持一致。</li></ol>',23)];const o=s(p,[["render",function(s,e,n,p,o,t){return a(),l("div",null,r)}]]);export{n as __pageData,o as default};
